/	SNL 		Skip if Nonzero Link
/ SZL     Skip if Zero Link

/	SMA 		Skip if Minus Accumulator.    Skip on AC < 0
/	SZA 		Skip if Zero Accumulator.     Skip on AC = 0
/	SPA 		Skip if Positive Accumulator. Skip on AC >= 0
/	SNA 		Skip if Nonzero Accumulator.  Skip on AC <> 0

/ SMA SZA		Skip if Less than or Equal to Zero
/	SPA SNA 	Skip if Greater than Zero
/	SZA SNL    	Skip on AC = 0 or L <> 0
/	SNA SZL    	Skip on AC <> 0 and L = 0
/	SMA SNL    	Skip on AC < 0 or L <> 0
/	SPA SZL    	Skip on AC >= 0 and L = 0
/	SMA SZA    	Skip on AC <= 0
/	SPA SNA    	Skip on AC > 0
/	SMA SZA SNL	Skip on AC <= 0 or L <> 0
/	SPA SNA SZL	Skip on AC > 0 and L=0



In: numH, numL
Out L, src

FndLin	   src tmp tmpH tmpL 
  Compar   Ctype tmp arg1H arg1L arg2H arg2L resH resL


/     The octal set:
/
/     000 nul  001 soh  002 stx  003 etx  004 eot  005 enq  006 ack  007 bel
/     010 bs   011 ht   012 nl   013 vt   014 np   015 cr   016 so   017 si
/     020 dle  021 dc1  022 dc2  023 dc3  024 dc4  025 nak  026 syn  027 etb
/     030 can  031 em   032 sub  033 esc  034 fs   035 gs   036 rs   037 us
/     040 sp   041  !   042  "   043  #   044  $   045  %   046  &   047  '
/     050  (   051  )   052  *   053  +   054  ,   055  -   056  .   057  /
/     060  0   061  1   062  2   063  3   064  4   065  5   066  6   067  7
/     070  8   071  9   072  :   073  ;   074  <   075  =   076  >   077  ?
/     100  @   101  A   102  B   103  C   104  D   105  E   106  F   107  G
/     110  H   111  I   112  J   113  K   114  L   115  M   116  N   117  O
/     120  P   121  Q   122  R   123  S   124  T   125  U   126  V   127  W
/     130  X   131  Y   132  Z   133  [   134  \   135  ]   136  ^   137  _
/     140  `   141  a   142  b   143  c   144  d   145  e   146  f   147  g
/     150  h   151  i   152  j   153  k   154  l   155  m   156  n   157  o
/     160  p   161  q   162  r   163  s   164  t   165  u   166  v   167  w
/     170  x   171  y   172  z   173  {   174  |   175  }   176  ~   177 del
/
/
/ 110;145;154;154;157;54;40;167;157;162;154;144;41;12;15
/
/ Block copying
/
/	1 - From keybuf to code  - Can copy in any direction
/  		ABCDEFGH              abcdefghijklmnopqrstuvwxyz
/  		ABCDEFGH              abcdefghijklmnopqrstuvwxyzABCDEFGH
/
/	2 - Make new space inside code - Must copy backwards
/  		ABCDEFGH              abcdefghijklmnopqrstuvwxyzABCDEFGH
/  		ABCDEFGH              abcdefghi-----jklmnopqrstuvwxyzABCDEFGH
/
/	3 - Delete a block inside code - Must copy forwards
/  		ABCDEFGH              abcdefghi-----jklmnopqrstuvwxyzABCDEFGH
/  		ABCDEFGH              abfghi-----jklmnopqrstuvwxyzABCDEFGH
/
/
/ DEFINE DBLADD A B
/ <CLA CLL; TAD A+1; TAD B+1; DCA A+1; RAL; TAD A; TAD B; DCA A>
/
/ DEFINE DSHFT C D
/ <CLA CLL; TAD C; RAL; DCA C; TAD D; RAL; DCA D>
/
/ DEFINE DMOVE E F
/ <CLA; TAD E; DCA F; TAD E+1; DCA F+1>
/
/ DEFINE DBLSUB G H TE
/ <CLA CLL; TAD H; CMA; DCA TE; TAD H+1; CIA CLL; SZL; ISZ TE; NOP CLL; TAD G+1; DCA G+1; RAL; TAD G; TAD TE; DCA G>

/
/
/
/ BCD functions from DECUS http://dustyoldcomputers.com/pdp-common/reference/papertapes/decus/decus-8-100.pal
/ http://so-much-stuff.com/pdp8/tapes/digital.html
/
/ figlet -W -f standard '* variables' | sed 's/^/\/\/ /g'
/
/ A 24 bit signed integet is +/- 8 388 607
/


//					    
//					    
//					      ____    ____     ___     ___
//					     |___ \  |___ \   / _ \   / _ \
//					       __) |   __) | | | | | | | | |
//					      / __/   / __/  | |_| | | |_| |
//					     |_____| |_____|  \___/   \___/
//					    
//					      ____    _  _      ___     ___
//					     |___ \  | || |    / _ \   / _ \
//					       __) | | || |_  | | | | | | | |
//					      / __/  |__   _| | |_| | | |_| |
//					     |_____|    |_|    \___/   \___/
//					    
//					      _____    ___     ___     ___
//					     |___ /   / _ \   / _ \   / _ \
//					       |_ \  | | | | | | | | | | | |
//					      ___) | | |_| | | |_| | | |_| |
//					     |____/   \___/   \___/   \___/
//					    
//					      _____   ____     ___     ___
//					     |___ /  |___ \   / _ \   / _ \
//					       |_ \    __) | | | | | | | | |
//					      ___) |  / __/  | |_| | | |_| |
//					     |____/  |_____|  \___/   \___/

//					    
//					    
//					    
//					    
//					      _____   _  _      ___     ___
//					     |___ /  | || |    / _ \   / _ \
//					       |_ \  | || |_  | | | | | | | |
//					      ___) | |__   _| | |_| | | |_| |
//					     |____/     |_|    \___/   \___/
//					    
//					      _____    __      ___     ___
//					     |___ /   / /_    / _ \   / _ \
//					       |_ \  | '_ \  | | | | | | | |
//					      ___) | | (_) | | |_| | | |_| |
//					     |____/   \___/   \___/   \___/
//					    
//					    
//					      _  _     ____     ___     ___
//					     | || |   |___ \   / _ \   / _ \
//					     | || |_    __) | | | | | | | | |
//					     |__   _|  / __/  | |_| | | |_| |
//					        |_|   |_____|  \___/   \___/
//					    
//					      _  _     _  _      ___     ___
//					     | || |   | || |    / _ \   / _ \
//					     | || |_  | || |_  | | | | | | | |
//					     |__   _| |__   _| | |_| | | |_| |
//					        |_|      |_|    \___/   \___/
//					    
//					      _  _      __      ___     ___
//					     | || |    / /_    / _ \   / _ \
//					     | || |_  | '_ \  | | | | | | | |
//					     |__   _| | (_) | | |_| | | |_| |
//					        |_|    \___/   \___/   \___/
//					    
//					    
//					      ____     ___     ___     ___
//					     | ___|   / _ \   / _ \   / _ \
//					     |___ \  | | | | | | | | | | | |
//					      ___) | | |_| | | |_| | | |_| |
//					     |____/   \___/   \___/   \___/
//					    
//					      ____    ____     ___     ___
//					     | ___|  |___ \   / _ \   / _ \
//					     |___ \    __) | | | | | | | | |
//					      ___) |  / __/  | |_| | | |_| |
//					     |____/  |_____|  \___/   \___/
//					    
//					      ____    _  _      ___     ___
//					     | ___|  | || |    / _ \   / _ \
//					     |___ \  | || |_  | | | | | | | |
//					      ___) | |__   _| | |_| | | |_| |
//					     |____/     |_|    \___/   \___/
//					    
//					      ____     __      ___     ___
//					     | ___|   / /_    / _ \   / _ \
//					     |___ \  | '_ \  | | | | | | | |
//					      ___) | | (_) | | |_| | | |_| |
//					     |____/   \___/   \___/   \___/
//					    
//					       __      ___     ___     ___
//					      / /_    / _ \   / _ \   / _ \
//					     | '_ \  | | | | | | | | | | | |
//					     | (_) | | |_| | | |_| | | |_| |
//					      \___/   \___/   \___/   \___/
//					    
//					       __     ____     ___     ___
//					      / /_   |___ \   / _ \   / _ \
//					     | '_ \    __) | | | | | | | | |
//					     | (_) |  / __/  | |_| | | |_| |
//					      \___/  |_____|  \___/   \___/
//					    
//					       __     _  _      ___     ___
//					      / /_   | || |    / _ \   / _ \
//					     | '_ \  | || |_  | | | | | | | |
//					     | (_) | |__   _| | |_| | | |_| |
//					      \___/     |_|    \___/   \___/
//					    
//					       __      __      ___     ___
//					      / /_    / /_    / _ \   / _ \
//					     | '_ \  | '_ \  | | | | | | | |
//					     | (_) | | (_) | | |_| | | |_| |
//					      \___/   \___/   \___/   \___/
//					    /					    
//					      _____    ___     ___     ___
//					     |___  |  / _ \   / _ \   / _ \
//					        / /  | | | | | | | | | | | |
//					       / /   | |_| | | |_| | | |_| |
//					      /_/     \___/   \___/   \___/
//					    
//					      _____   ____     ___     ___
//					     |___  | |___ \   / _ \   / _ \
//					        / /    __) | | | | | | | | |
//					       / /    / __/  | |_| | | |_| |
//					      /_/    |_____|  \___/   \___/
//					    
//					      _____   _  _      ___     ___
//					     |___  | | || |    / _ \   / _ \
//					        / /  | || |_  | | | | | | | |
//					       / /   |__   _| | |_| | | |_| |
//					      /_/       |_|    \___/   \___/
//					    
//					      _____    __      ___     ___
//					     |___  |  / /_    / _ \   / _ \
//					        / /  | '_ \  | | | | | | | |
//					       / /   | (_) | | |_| | | |_| |
//					      /_/     \___/   \___/   \___/
//					    
/
/https://user-images.githubusercontent.com/325326/65816829-ed435100-e200-11e9-9440-e0df4f8777a1.png
/https://user-images.githubusercontent.com/325326/65816830-ed435100-e200-11e9-8f48-ff7796cf4fc1.png
/

/	-20  =  -20	
/	-20  <  -10	
/	-20  <    0	
/	-20  <   10	
/	-20  <   20	
/	-10  >  -20	
/	-10  =  -10	
/	-10  <    0	
/	-10  <   10	
/	-10  <   20	
/	  0  >  -20	
/	  0  >  -10	
/	  0  =    0	
/	  0  <   10	
/	  0  <   20	
/	 10  >  -20	
/	 10  >  -10	
/	 10  >    0	
/	 10  =   10	
/	 10  <   20	
/	 20  >  -20	
/	 20  >  -10	
/	 20  >    0	
/	 20  >   10	
/	 20  =   20	
/       =========       ===========    ===============   ===============   ==================
/	NEG - NEG	-1 - -1=  0    -1 - -128=  127   -128 - -1= -127   -128 -  -128=  0
/	NEG - POS	-1 -  1=- 2    -1 -  127= -128   -128 -  1= -129   -128 -   127= -255
/	POS - NEG	 1 - -1=  2     1 - -128=  129 	  127 - -1=  128    127 -  -128=  255
/ POS - POS	 1 -  1=  0     1 -  127= -126	  127 -  1=  126    127 -   127=  0
/       =========       ===========    ===============   ===============   ==================
/
/
/
/
/
/

6000: 0000 0001 0006 7754 7740 7753 7741 0000
6010: 0000 0144 0011 7756 7777 0101 7774 7756
6020: 7777 0102 0000<0000 0310 0010 7757 7777
6030: 0121 7773 7777 0127>0000 0016 7754 7777
6040: 0101 7773 7777 0000 0620 0014 7757 7777
6050: 0101 7773 7777 0101 7765 7776 0036 1100
6060: 0000 0000 0764 0010 7756 7775 0101 0102
6070: 0103 7775 0000 7777 7402 7402 7402 7402
6100: 7402 7402 7402 7402 7402 7402 7402 7402
6110: 7402 7402 7402 7402 7402 7402 7402 7402


6000: 0000 0001 0006 7754 7740 7753 7741 0000   // ORIGINAL
6010: 0000 0144 0011 7756 7777 0101 7774 7756   // ORIGINAL
6020: 7777 0102 0000<0000 0310 0010 7757 7777   // ORIGINAL
6030: 0101 7773 7777 0102 0000 0000 0454 0016   // ORIGINAL
6040: 7754 7777 0101 7773 7777 0102 7753 7777   // ORIGINAL
6050: 0103 7773 7777 0104 0000 0000 0620 0014   // ORIGINAL
6060: 7757 7777 0101 7773 7777 0101 7765 7776   // ORIGINAL
6070: 0036 1100 0000 0000 0764 0010 7756 7775   // ORIGINAL
6100: 0101 0102 0103 7775 0000 7777             // ORIGINAL

6000: 0000 0001 0006 7754 7740 7753 7741 0000   // LINE 200 MARKED
6010: 0000 0144 0011 7756 7777 0101 7774 7756
6020: 7777 0102 0000 ---- ---- ---- ---- ----
6030: ---- ---- ---- ---- ---- 0000 0454 0016
6040: 7754 7777 0101 7773 7777 0102 7753 7777
6050: 0103 7773 7777 0104 0000 0000 0620 0014
6060: 7757 7777 0101 7773 7777 0101 7765 7776
6070: 0036 1100 0000 0000 0764 0010 7756 7775
6100: 0101 0102 0103 7775 0000 7777

6000: 0000 0001 0006 7754 7740 7753 7741 0000    // LINE 200 REMOVED
6010: 0000 0144 0011 7756 7777 0101 7774 7756    // LINE 200 REMOVED
6020: 7777 0102 0000 0000 0454 0016 7754 7777    // LINE 200 REMOVED
6030: 0101 7773 7777 0102 7753 7777 0103 7773    // LINE 200 REMOVED
6040: 7777 0104 0000 0000 0620 0014 7757 7777    // LINE 200 REMOVED
6050: 0101 7773 7777 0101 7765 7776 0036 1100    // LINE 200 REMOVED
6060: 0000 0000 0764 0010 7756 7775 0101 0102    // LINE 200 REMOVED
6070: 0103 7775 0000 7777                        // LINE 200 REMOVED


/


NEW
10 LET A=50
20 LET B=20
30 LET C=A+B
31 LET D=A-B
32 LET E=A*B
33 LET F=E/3
50 PRINT A
51 PRINT B
52 PRINT C
53 PRINT D
54 PRINT E
55 PRINT F
60 END



NEW
10 LET A=110
20 GOTO A
30 PRINT 30
31 END
100 PRINT 100
101 END
110 PRINT 110
111 END
120 PRINT 120
121 END

new
10 let N = 1
20 ? "Hello world #"; N
30 let N = N + 1
40 if N > 5 then goto 100
50 goto 20
100 ? "Bye world..."
110 end
4 rem
5 rem Hello World program
6 rem


NEW
10 PRINT A
20 PRINT B
30 PRINT "AA"
40 PRINT "BB"
50 END


NEW
10 LET A = 0
20 PRINT A;
30 LET A = A + 1
40 IF A < 10 THEN GOTO 20
50 END

-------------------------------------------------------

new
10 LET A=10
20 LET B=11
30 IF A > B THEN PRINT ">"
40 IF A < B THEN PRINT "<"
50 IF A = B THEN PRINT "="
60 IF A <> B THEN PRINT "!"
70 IF A >= B THEN PRINT "}"
80 IF A <= B THEN PRINT "{"
90 END

>run
<
!
{

>20 LET B=10
>run
=
}
{

>20 LET B=9
>run
>
!
}
---------------------------------------------------------


new
free
10 print "Input first number:"
free
20 input A
free
30 print "Input second number:"
free
40 input B
free
50 if A = B then print "The numbers are the same"
free
60 if A = B then print "The first number is largest"
free
70 if A = B then print "The second number is largest"
free
80 end
free
list
